#!/usr/bin/env bash
#------------------------------------------------------------------------------
#
# File:         rhel_kernel_builder
#
# Description:  Build script for CentOS Stream kernel.
#
# The following two environment variables must be set:
# - KERNEL_SRC_DIR
# - KERNEL_BUILD_DIR
#
# Examples:
#
# Clone the specified GitLab fork of the CentOS Stream kernel repo (the
# Y-stream for RHEL kernel), configure the kernel, add remote repos for
# backporting from the upstream kernel, and build with debugging enabled:
#   $ rhel_kernel_builder -s y9 -f sdunnaga-12345 -a aarch64 -g -b -c -d
#
# Rebuild, this time also building kernel RPM packages:
#   $ rhel_kernel_builder -s y9 -f sdunnaga-12345 -a aarch64 -c -d -r
#
# NOTE:
# Works on Fedora 40 on both x86_64 and aarch64, but not on Fedora 41.
#------------------------------------------------------------------------------

set -eu

BACKPORTING=false
DEBUG_KERNEL=false
CONFIGURE=false
CONFIG_FILE="none"
GIT_CLONE=false
MENUCONFIG=false
RHEL_KERNEL_STREAM="y9"
RT_KERNEL=false
TARGET_ARCH="x86_64"
BUILD_RPM_PACKAGES=false
LINUX_REPO="stable"
GITLAB_NAMESPACE="redhat"

CROSS_COMPILE_PREFIX=""
CUSTOM_KERNEL_ID="chopin"
PATCHES_DIR=""
BUILD_SUCCESS=false

BLACK=$(tput setaf 0)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
LIME_YELLOW=$(tput setaf 190)
BLUE=$(tput setaf 4)
BRIGHT_BLUE=$(tput setaf 12)
POWDER_BLUE=$(tput setaf 153)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
WHITE=$(tput setaf 7)
BRIGHT=$(tput bold)
NORMAL=$(tput sgr0)
BOLD=$(tput bold)
BLINK=$(tput blink)
REVERSE=$(tput smso)
UNDERLINE=$(tput smul)

usage()
{
    echo "Usage: $0 [options]"
    echo ""
    echo "Options:"
    echo "  -a <x86_64|aarch64|riscv64>   Architecture"
    echo "  -b                            Add remote repositories for backporting"
    echo "  -d                            DEBUG kernel"
    echo "  -c                            Configure kernel (implies clean)"
    echo "  -f <username>                 CentOS Stream or RHEL kernel fork name"
    echo "  -g                            Git clone"
    echo "  -h                            Show help"
    echo "  -l <next|stable>              Linux kernel repository"
    echo "  -m                            Run menuconfig"
    echo "  -p <patches_dir>              Patches directory"
    echo "  -r                            Build RPM packages"
    echo "  -s <y9|y10|z9|z10>            RHEL kernel stream (Y-stream or Z-stream)"
    echo "  -t                            RT kernel"
    echo ""
    exit 1
}

set_my_kernel_configs()
{ 
    # Disable treating warnings as errors
    "${KERNEL_SRC_DIR}/scripts/config" --file "${KERNEL_BUILD_DIR}/.config" --disable WERROR

    # Disable SELinux
    "${KERNEL_SRC_DIR}/scripts/config" --file "${KERNEL_BUILD_DIR}/.config" --disable SECURITY_SELINUX

    # Disable BTF (eBPF debugging and tracing)
    "${KERNEL_SRC_DIR}/scripts/config" --file "${KERNEL_BUILD_DIR}/.config" --disable DEBUG_INFO_BTF
    "${KERNEL_SRC_DIR}/scripts/config" --file "${KERNEL_BUILD_DIR}/.config" --disable DEBUG_INFO_BTF_MODULES

    # Disable enforcement of module signing
    "${KERNEL_SRC_DIR}/scripts/config" --file "${KERNEL_BUILD_DIR}/.config" --disable MODULE_SIG_ALL
    "${KERNEL_SRC_DIR}/scripts/config" --file "${KERNEL_BUILD_DIR}/.config" --disable MODULE_SIG_FORCE
}

create_log_file()
{
    local GCC_VERSION
    GCC_VERSION=$(gcc --version | head -n 1)

    local DATE_STR
    DATE_STR=$(date)

    local TIMESTAMP
    TIMESTAMP=$(date -d "today" +"%Y_%m_%d_%H%M")

    mkdir -p ~/logs
    LOG_FILE=~/logs/${RHEL_KERNEL_STREAM}_kernel_build_${TIMESTAMP}.log

    {
        echo "//---------------------------------------------------------------"
        echo "// ${RHEL_KERNEL_STREAM^^} Kernel Build"
        echo "// ${DATE_STR}"
        echo "// KERNEL_SRC_DIR =   ${KERNEL_SRC_DIR}"
        echo "// KERNEL_BUILD_DIR = ${KERNEL_BUILD_DIR}"
        echo "// ${GCC_VERSION}"
        if [[ ${CONFIGURE} == "true" ]]; then
            echo "// ${RHEL_KERNEL_STREAM^^} kernel config file: ${CONFIG_FILE}"
        fi
        echo "//---------------------------------------------------------------"
        echo ""
    } > "${LOG_FILE}"
}

generate_ctags()
{
    echo "${WHITE}Generating ctags..."
    echo "${NORMAL}"

    # Create necessary directories
    mkdir -p ~/tmp
    rm -f "${KERNEL_BUILD_DIR}/tags"

    # Generate tags from source directory but write to build directory.
    # Use kernel-specific exclusions.
    ctags --tag-relative=yes \
          --sort=yes \
          --recurse \
          --links=no \
          --languages=C,C++ \
          --c-kinds=+p \
          --fields=+iaS \
          --extras=+q \
          -f "${KERNEL_BUILD_DIR}/tags" \
          --exclude="*.o" \
          --exclude="*.so" \
          --exclude="*.a" \
          --exclude="*.bin" \
          --exclude="*.ko" \
          --exclude="*.mod" \
          --exclude="*.cmd" \
          --exclude="*.d" \
          --exclude="*.symtypes" \
          --exclude="*.order" \
          --exclude=".git/*" \
          --exclude="cscope.*" \
          --exclude="tags*" \
          --exclude="Module.symvers" \
          --exclude="vmlinux*" \
          "${KERNEL_SRC_DIR}"

    if [[ $? -ne 0 ]]; then
        echo "${RED}${BOLD}"
        echo "Error: Failed to generate tags"
        echo "${NORMAL}"
        exit 1
    fi
}

check_required_commands()
{
    local required_cmds=(
        "git" "make" "gcc" "ld" "ctags" "cpupower" "bc"
        "perl" "python3" "flex" "bison" "patch" "dtc"
        "xz" "unzip" "rsync"
    )

    for cmd in "${required_cmds[@]}"; do
        if ! command -v "${cmd}" > /dev/null 2>&1; then
            echo "${RED}${BOLD}"
            echo "Error: ${cmd} is required but not installed. Exiting."
            echo "${NORMAL}"
            exit 1
        fi
    done
}

apply_kernel_patches()
{
    # Enable nullglob to avoid errors if no patch files are found
    shopt -s nullglob

    echo ""
    echo "${WHITE}Applying patches from ${BRIGHT_BLUE}${BOLD}${PATCHES_DIR}..."
    echo "${NORMAL}"

    local PATCHES_FOUND=false

    for PATCH_FILE in "${PATCHES_DIR}"/*.patch; do
        if [[ -f "${PATCH_FILE}" ]]; then
            PATCHES_FOUND=true
            echo "${CYAN}${PATCH_FILE}${NORMAL}"
            git am "${PATCH_FILE}" || {
                echo "${RED}${BOLD}"
                echo "Error: Failed to apply patch ${BRIGHT_BLUE}${BOLD}${PATCH_FILE}"
                echo "${NORMAL}"
                git am --abort
                exit 1
            }
        fi
    done

    if [[ "${PATCHES_FOUND}" != "true" ]]; then
        echo "${RED}${BOLD}"
        echo "Error: No patches found in ${BRIGHT_BLUE}${BOLD}${PATCHES_DIR}"
        echo "${NORMAL}"
        exit 1
    fi
}

set_target_architecture() {
    case "${TARGET_ARCH}" in
        aarch64)
            MAKE_ARCH="arm64"
            if [[ "$(uname -m)" != "aarch64" ]]; then
                CROSS_COMPILE_PREFIX="aarch64-linux-gnu-"
            else
                CROSS_COMPILE_PREFIX=""
            fi
            ;;  
        riscv64)
            MAKE_ARCH="riscv"
            if [[ "$(uname -m)" != "riscv64" ]]; then
                CROSS_COMPILE_PREFIX="riscv64-linux-gnu-"
            else
                CROSS_COMPILE_PREFIX=""
            fi
            ;;  
        x86_64) 
            if [[ "$(uname -m)" != "x86_64" ]]; then
                echo "${RED}${BOLD}"
                echo "Error: attempting to build for x86_64 on a non-x86_64 system."
                echo "${NORMAL}"
                exit 1
            fi
            MAKE_ARCH="x86_64"
            CROSS_COMPILE_PREFIX=""
            ;;
        *) 
            echo "${RED}${BOLD}Invalid architecture specified: $TARGET_ARCH. Supported: aarch64, riscv64, x86_64."
            echo "${NORMAL}"
            exit 1
            ;;
    esac
}

add_remotes_for_backporting()
{
    echo "${WHITE}Adding repositories for backporting..."
    echo "${NORMAL}"

    # Change into the kernel source directory
    if [[ -d "${KERNEL_SRC_DIR}" ]]; then
        cd "${KERNEL_SRC_DIR}" || {
            echo "${RED}${BOLD}Error: Failed to cd into ${KERNEL_SRC_DIR}${NORMAL}"
            exit 1
        }
    else
        echo "${RED}${BOLD}Error: Kernel source directory ${KERNEL_SRC_DIR} does not exist.${NORMAL}"
        exit 1
    fi

    # Add a Y-stream or Z-stream kernel source repo as a remote.
    case "${RHEL_KERNEL_STREAM}" in
        y9)
            git remote add cs9 "https://gitlab.com/redhat/centos-stream/src/kernel/centos-stream-9"
            git fetch -q cs9
            git fetch -q --tags cs9
            ;;
        y10)
            git remote add cs10 "https://gitlab.com/redhat/centos-stream/src/kernel/centos-stream-10"
            git fetch -q cs10
            git fetch -q --tags cs10
            ;;
        z9)
            git remote add rhel9 "https://gitlab.com/redhat/rhel/src/kernel/rhel-9"
            git fetch -q rhel9
            git fetch -q --tags rhel9
            ;;
        z10)
            git remote add rhel10 "https://gitlab.com/redhat/rhel/src/kernel/rhel-10"
            git fetch -q rhel10
            git fetch -q --tags rhel10
            ;;
        *)
            echo "${RED}${BOLD}"
            echo "Error: invalid kernel source repo (must be Y-stream or Z-stream)"
            echo "${NORMAL}"
            exit 1
            ;;
    esac

    # Add kernel source repository for backporting.
    if [[ "${LINUX_REPO}" == "stable" ]]; then
        git remote add linux-stable "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git"
        git fetch -q linux-stable
        git fetch -q --tags linux-stable
    elif [[ "${LINUX_REPO}" == "next" ]]; then
        git remote add linux-next "https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git"
        git fetch -q linux-next
        git fetch -q --tags linux-next
    fi
}

clone_kernel_repos()
{
    # Remove the current kernel source dir if it exists.
    if [[ -d "${KERNEL_SRC_DIR}" ]]; then
        echo "${YELLOW}${BOLD}"
        echo "WARNING: The kernel source directory exists."
        read -p "Are you sure you want to remove the existing workspace? Type 'yes' to confirm: ${NORMAL}" CONFIRMATION
        CONFIRMATION=${CONFIRMATION:-no} # Default to 'no'
        echo "${NORMAL}"
        if [[ "$CONFIRMATION" == "yes" ]]; then
            echo "${WHITE}Removing ${BRIGHT_BLUE}${BOLD}$KERNEL_SRC_DIR${NORMAL}..."
            echo "${WHITE}Removing ${BRIGHT_BLUE}${BOLD}$KERNEL_BUILD_DIR..."
            echo "${NORMAL}"
            rm -rf "${KERNEL_SRC_DIR}"
            rm -rf "${KERNEL_BUILD_DIR}"
        else
            echo "${WHITE}Workspace was not removed. Please reconsider your life choices."
            echo "${NORMAL}"
            exit 1
        fi
    fi

    # Clone the specified RHEL kernel source repository.
    case "${RHEL_KERNEL_STREAM}" in
        y9)
            GROUP="centos-stream"
            REPO="centos-stream-9"
            DESC="CentOS Stream 9 (Y‑stream)"
            ;;
        y10)
            GROUP="centos-stream"
            REPO="centos-stream-10"
            DESC="CentOS Stream 10 (Y‑stream)"
            ;;
        z9)
            GROUP="rhel"
            REPO="rhel-9"
            DESC="RHEL 9 (Z‑stream)"
            ;;
        z10)
            GROUP="rhel"
            REPO="rhel-10"
            DESC="RHEL 10 (Z‑stream)"
            ;;
        *)
            echo "${RED}${BOLD}"
            echo >&2 "Error: Invalid RHEL_KERNEL_STREAM '${RHEL_KERNEL_STREAM}'."
            echo >&2 "       Must be one of: y9, y10, z9, z10."
            echo "${NORMAL}"
            exit 1
            ;;
    esac

    if [[ "${GITLAB_NAMESPACE}" == "redhat" ]]; then
        # Official upstream uses nested path
        RHEL_KERNEL_URL="https://gitlab.com/${GITLAB_NAMESPACE}/${GROUP}/src/kernel/${REPO}.git"
    else
        # Forks are flattened at the project root
        RHEL_KERNEL_URL="https://gitlab.com/${GITLAB_NAMESPACE}/${REPO}.git"
    fi

    echo "${WHITE}Cloning ${DESC} kernel source tree from: ${CYAN}${RHEL_KERNEL_URL}${NORMAL}"
    echo ""

    git clone "${RHEL_KERNEL_URL}" "${KERNEL_SRC_DIR}" || {
        echo >&2 "${RED}${BOLD}Error: cloning '${REPO}' failed. Check RHEL kernel URL or permissions."
        echo "${NORMAL}"
        exit 1
    }

    echo "${NORMAL}"

    # Add repositories for backporting if requested.
    if [[ "${BACKPORTING}" == "true" && ( "${LINUX_REPO}" == "stable" || "${LINUX_REPO}" == "next" ) ]]; then
        add_remotes_for_backporting
    fi
}

set_config_file()
{
    case "${RHEL_KERNEL_STREAM}" in
        y9|z9)
            CONFIG_FILE="redhat/configs/kernel-5.14.0-${TARGET_ARCH}"
            ;;
        y10|z10)
            CONFIG_FILE="redhat/configs/kernel-6.12.0-${TARGET_ARCH}"
            ;;
        *)
            echo "${RED}${BOLD}"
            echo "Error: Invalid repository specified. Must be 'cs9' or 'cs10'"
            echo "${NORMAL}"
            exit 1
            ;;
    esac

    # Append -rt if RT_KERNEL is set to true
    if [ "${RT_KERNEL}" = "true" ]; then
        CONFIG_FILE="${CONFIG_FILE}-rt"
    fi

    # Append -debug if DEBUG_KERNEL is set to true
    if [ "${DEBUG_KERNEL}" = "true" ]; then
        CONFIG_FILE="${CONFIG_FILE}-debug"
    fi

    CONFIG_FILE="${CONFIG_FILE}.config"
}

configure_kernel()
{
    echo "${WHITE}Cleaning the build..."
    echo "${NORMAL}"
    rm -rf ~/rpmbuild
    rm -rf "${KERNEL_BUILD_DIR}"; sync
    mkdir -p "${KERNEL_BUILD_DIR}"

    echo "${WHITE}Generating kernel configs..."
    echo "${NORMAL}"
    make dist-configs > /dev/null 2>&1

    set_config_file

    # Copy the kernel config file to .config in the build directory.
    cp "${CONFIG_FILE}" "${KERNEL_BUILD_DIR}/.config"
    echo "${WHITE}CentOS Stream kernel config: ${BRIGHT_BLUE}${BOLD}${CONFIG_FILE}"
    echo "${NORMAL}"

    # Set my usual kernel configs.
    echo "${WHITE}Set my usual kernel configs ..."
    echo "${NORMAL}"
    set_my_kernel_configs

    # Clean the kernel source tree.
    echo "${WHITE}Cleaning the source tree..."
    echo "${NORMAL}"
    make ARCH="${MAKE_ARCH}" mrproper > /dev/null 2>&1

    # Resolve any new or unset config options using default values.
    echo "${WHITE}Running olddefconfig..."
    echo "${NORMAL}"
    make O="${KERNEL_BUILD_DIR}" ARCH="${MAKE_ARCH}" olddefconfig > /dev/null 2>&1

    # Run menuconfig if requested.
    if "${MENUCONFIG}"; then
        if [[ -n "${KERNEL_BUILD_DIR}" ]]; then
            if [[ -n "${CROSS_COMPILE_PREFIX}" ]]; then
                make ARCH="${MAKE_ARCH}" \
                     CROSS_COMPILE="${CROSS_COMPILE_PREFIX}" \
                     O="${KERNEL_BUILD_DIR}" menuconfig
            else
                make ARCH="${MAKE_ARCH}" \
                     O="${KERNEL_BUILD_DIR}" menuconfig
            fi
        fi
    fi

    generate_ctags
}

build_kernel()
{
    case "${RHEL_KERNEL_STREAM}" in
        y9)
            echo "${WHITE}Building the CentOS Stream 9 kernel..."
            ;;
        y10)
            echo "${WHITE}Building the CentOS Stream 10 kernel..."
            ;;
        z9)
            echo "${WHITE}Building the RHEL 9 kernel..."
            ;;
        z10)
            echo "${WHITE}Building the RHEL 10 kernel..."
            ;;
        *)
            echo "${RED}${BOLD}"
            echo >&2 "Error: Invalid RHEL_KERNEL_STREAM '${RHEL_KERNEL_STREAM}'."
            echo >&2 "       Must be one of: y9, y10, z9, z10."
            echo "${NORMAL}"
            exit 1
            ;;
    esac

    echo "${NORMAL}"

    echo "Log file: ${CYAN}${LOG_FILE}"
    echo "${NORMAL}"

    # Uncomment to set identifier for this custom kernel build.
    # tango
    sed -i "s/^EXTRAVERSION.*/EXTRAVERSION = -${CUSTOM_KERNEL_ID}/" "${KERNEL_SRC_DIR}/Makefile"

    # Set the kernel build command.
    if [[ -n "${CROSS_COMPILE_PREFIX}" ]]; then
        MAKE_CMD="make -j$(nproc) O=${KERNEL_BUILD_DIR} ENABLE_WERROR= CROSS_COMPILE=${CROSS_COMPILE_PREFIX} ARCH=${MAKE_ARCH}"
    else
        MAKE_CMD="make -j$(nproc) O=${KERNEL_BUILD_DIR} ENABLE_WERROR= ARCH=${MAKE_ARCH}"
    fi
    echo "${WHITE}Build command: ${CYAN}${MAKE_CMD}"
    echo "${NORMAL}"
    echo "Build command: ${MAKE_CMD}" >> "${LOG_FILE}"
    echo "" >> "${LOG_FILE}"

    # Build the kernel
    eval "${MAKE_CMD}" >> "${LOG_FILE}" 2>&1
    BUILD_EXIT_STATUS=${PIPESTATUS[0]}
    echo "" >> "${LOG_FILE}"

    # Build RPM packages if requested
    if [[ "${BUILD_RPM_PACKAGES}" == "true" ]]; then
        echo "Running: make -j$(nproc) binrpm-pkg O=${KERNEL_BUILD_DIR}" >> "${LOG_FILE}"
        (
            cd "${KERNEL_SRC_DIR}" &&
            make -j"$(nproc)" O="${KERNEL_BUILD_DIR}" binrpm-pkg >> "${LOG_FILE}" 2>&1
            cp ${KERNEL_BUILD_DIR}/rpmbuild/RPMS/aarch64/*.rpm ${KERNEL_BUILD_DIR}
        )
        BUILD_EXIT_STATUS=$?
    fi

    END_TIME=$(date +%s)
    BUILD_DURATION=$((END_TIME - START_TIME))
    BUILD_MINUTES=$((BUILD_DURATION / 60))
    BUILD_SECONDS=$((BUILD_DURATION % 60))

    echo "" >> "${LOG_FILE}"
    echo "//---------------------------------------------------------------" >> "${LOG_FILE}"

    case "${TARGET_ARCH}" in
        aarch64)
            IMAGE_FILE="${KERNEL_BUILD_DIR}/arch/arm64/boot/Image"
            if [[ ${BUILD_EXIT_STATUS} -eq 0 && -f "${IMAGE_FILE}" ]]; then
                echo "${GREEN}${BOLD}Build success${NORMAL}"
                BUILD_SUCCESS=true
            else
                echo "${RED}${BOLD}Build failed${NORMAL}"
            fi
            ;;
        riscv64)
            IMAGE_FILE="${KERNEL_BUILD_DIR}/arch/riscv/boot/Image"
            if [[ ${BUILD_EXIT_STATUS} -eq 0 && -f "${IMAGE_FILE}" ]]; then
                echo "${GREEN}${BOLD}Build success${NORMAL}"
                BUILD_SUCCESS=true
            else
                echo "${RED}${BOLD}Build failed${NORMAL}"
            fi
            ;;
        x86_64)
            VMLINUX_FILE="${KERNEL_BUILD_DIR}/vmlinux"
            if [[ "${BUILD_EXIT_STATUS}" -eq 0 && ( -f "${VMLINUX_FILE}" || -f "${KERNEL_SRC_DIR}/vmlinux" ) ]]; then
                echo "${GREEN}${BOLD}Build success${NORMAL}"
                BUILD_SUCCESS=true
            else
                echo "${RED}${BOLD}Build failed${NORMAL}"
            fi
            ;;
    esac
}

# Process command line options.
while getopts "a:bcdf:ghl:mp:rs:t" opt; do
    case $opt in
        a) TARGET_ARCH="$OPTARG" ;;
        b) BACKPORTING=true ;;
        d) DEBUG_KERNEL=true ;;
        c) CONFIGURE=true ;;
        f) GITLAB_NAMESPACE="$OPTARG" ;;
        g) GIT_CLONE=true ;;
        h) usage; exit ;;
        l) 
           if [[ "$OPTARG" == "stable" || "$OPTARG" == "next" ]]; then
               LINUX_REPO="$OPTARG"
           else
               echo "Error: -b must be either 'stable' or 'next'"
               usage
               exit 1
           fi
           ;;
        m) MENUCONFIG=true ;;
        p) PATCHES_DIR="$OPTARG" ;;
        r) BUILD_RPM_PACKAGES=true ;;
        s) RHEL_KERNEL_STREAM="$OPTARG" ;;
        t) RT_KERNEL=true ;;
        \?) usage; exit 1 ;;
    esac
done

# Ensure required environment variables are set.
if [[ -z "${KERNEL_SRC_DIR}" || -z "${KERNEL_BUILD_DIR}" ]]; then
    echo "${RED}${BOLD}"
    echo "Error: KERNEL_SRC_DIR and KERNEL_BUILD_DIR not set."
    echo "${NORMAL}"
    exit 1
else
    echo ""
    echo "${WHITE}KERNEL_SRC_DIR =   ${CYAN}${KERNEL_SRC_DIR}${NORMAL}"
    echo "${WHITE}KERNEL_BUILD_DIR = ${CYAN}${KERNEL_BUILD_DIR}"
    echo "${NORMAL}"
fi

check_required_commands

set_target_architecture

# Clone the CentOS Stream kernel source repository.
if [[ "${GIT_CLONE}" == true ]]; then
    clone_kernel_repos
fi

# Change directory to the kernel source directory.
if [[ -d "${KERNEL_SRC_DIR}" ]]; then
    cd "${KERNEL_SRC_DIR}" || exit 1
else
    echo "${RED}${BOLD}"
    echo "Error: KERNEL_SRC_DIR does not exist: ${BRIGHT_BLUE}${BOLD}${KERNEL_SRC_DIR}"
    echo "${NORMAL}"
    exit 1
fi

# Configure the kernel.
if [[ "${CONFIGURE}" == "true" ]]; then
    configure_kernel
fi

# Apply patches
if [[ -n "${PATCHES_DIR}" && -d "${PATCHES_DIR}" ]]; then
    apply_kernel_patches
fi

# If this is an Orin Nano, set for performance mode.
if grep -q "Orin Nano" /sys/firmware/devicetree/base/model; then
    echo "${WHITE}Setting for performance mode on Orin Nano..."
    echo "${NORMAL}"
    sudo cpupower frequency-set -g performance > /dev/null 2>&1
fi

create_log_file

START_TIME=$(date +%s)

# Remove any prior kernel images, since those are used to check build success.
rm -f ${KERNEL_BUILD_DIR}/arch/arm64/boot/Image
rm -f ${KERNEL_BUILD_DIR}/arch/riscv/boot/Image
rm -f ${KERNEL_BUILD_DIR}/vmlinux

build_kernel

# Show build results.
echo "${WHITE}Build time: ${BUILD_MINUTES} min, ${BUILD_SECONDS} sec"
echo "${NORMAL}"
echo "// Build time: ${BUILD_MINUTES} min, ${BUILD_SECONDS} sec" >> "${LOG_FILE}"
echo "//---------------------------------------------------------------" >> "${LOG_FILE}"

if [[ "${BUILD_SUCCESS}" == true ]]; then
    exit 0  # Success
else
    exit 1  # Failure
fi
